==>UI icin e2e test'den bahsettigimizde bir fonksiyonun baglantili olan diger fonksiyonlarla birlikte test edilmesini
    kastediyoruz. Ikinci anlami ise UI testi, API testi ve data base testinin yapilmasidir. Bu  testler genelde ayni framework'te fakat
    farkli branch'de calisiliyor. 
==>Olusturacagimiz framework hard coded olmamali datalar dinamik olarak cekilmeli.
==>Java scripte class isimleri genelde kebap case yontemi ile olusturuluyor. Buraya yazacagimiz before()
    ile class'in calismasindan once tek seferlik calismasini istedigimiz kodlari before() icerisine yaziyoruz.
    beforeEach() her bir it blogundan once bir kere calisacak kodlar buraya yazilir.
==>cypress'te yazdigimiz describe aslinda bizim class'imiz oluyor.
==>datalari saklamak icin fixture klasorunun altinda creds.json isminde bir dosya olusturuldu. json=java scripte
    object notation. Datalari saklamak icin json formati gayet kullanisli.
==>API testing'de baseUrl'e ihtiyac duyuyoruz.
==>json dosyasinda birden fazla {} ile birden fazla datayi tutmak istedigimizde [{}] formati ile array lestirmek gerek.
==>Page object model'de onemli olan objelerin tekrar tekrar kullanima uygun olarak olusturulmasidir. Bu sebeple POM ile
    calisirken locate alma gibi islemler test'in icerisinde degil test disinda yapilip, bulundugu yerden cagirilarak 
    test'in icinde kullanilmalidir. Bunun icin pages adinda bir klasor olusturulabilir. Bu klasor e2e'nin altinda 
    olusturulabilecegi gibi support altinda da olusturulabilir.
    AddDeanPage.js adinda bir dosya olusturuldu. Bu dosya icerisine ayni isimle bir class oluturuldu ve dean eklemek
    icin gerekli olan locate ler bu class icerisinde alindi. Daha sonra bu class'tan olusturulacak objelerle bu class'a
    erisebilmek icin javascript geregi olarak sinifin disina; export default AddDeanPage; kodu eklendi. Locate'leri 
    her ne kadar olusturdugumuz bu yeni class'ta alsak da geleneksek yontem ile yani cy.get('...') ile locate aldigimiz 
    zaman tekrar kullanima uygun olmuyor ve bu turlu kullanim tavsiye edilmiyor. Bunun yerine iki farkli yontem kullanabiliriz.
    Birincisi locate alma islemini bir method icerisinde yapip locati method icerisinde return ederiz ve bu methodu
    test icerisinde cagirarak locati tekrar tekrar kullanmis oluruz. Ikinci secenek ise diyelim ki aldigimiz locate'e
    click leyecegiz. Bu click islemini de method icerisinde yapip sadece methodu test icerisinde cagiriyoruz. Testte 
    kullanilan datalarin testin icerisinde bulunmasi istenmeyen ve acemice bir durumdur. Bundan kacinmak icin kullancagimiz
    datalari koymak icin fixture'un altinda register-data.json adinda bir dosya olusturduk.
    -->Login islemi surekli yapilacagi icin login olmak icin commands.js dosyasinin icinde reusable bir method olusturuldu. Bunun icin su kodlari yazdik;
    Cypress.Commands.add('method ismi',(email,password)=>{
        login butonuna tikla
        cy.get('...').click();
        kullanici adi gir 
        cy.get('...').type(username)
        password gir
        cy.get('...').type(password)
        login butonuna tikla
        cy.get('...').click();
    })
    Sonrasinda cy.login(parametreler) diyerek methodu cagiriyoruz. Bilindigi gibi methodun parametreleri olan 
    username ve password'un dogrudan yazilmasi hard coded oluyor ve istenmiyor.
==>Cypress framework'te bulunan commands.js - cypress.config.js dosyalarda bulunan degiskenler otomatik olarak framework'te
    bulunan tum class'lar tarafindan gorulur. Fakat AddDeanPage dosyasi icerisinde olusturudugumuz methodlar test 
    class'imizda otomatik olarak gorulmeyecektir. Bunun icin AddDeanPage class'ini export default AddDeanPage; kodu ile 
    export ettikten sonra test class'ta da import etmemiz gerek. Bunun icin import AddDeanPage from"dosya yolu" kodunu 
    kullaniyoruz. Daha sonrasinda bu sayfadan olusturacagimiz bir object ile bu sayfada yer alan methodlari kullanabiliriz.
    const deanPage = new AddDeanPage(); kodu ile object olusturmus oluyoruz.
==>fixture klasoru altindaki dosyalar da otomatik olarak tum framework te gorulebilir. Bunun icin cy.fixture() methodunu
    kullaniyoruz. Kisaca anlatmak gerekirse;
    cy.fixture("creds").then((data)=>{
        Burada fixture den sonra kullandigimiz then() methodu creds dosyasi icerisindeki datalari otomatik olarak
        return etmis oluyor ve kullanabiliyoruz. Bu otomatik return gibi bazi yerlerde js oldukÃ§a kullanisli ve 
        avantajli oluyor. Gelen datayi bir degiskenle tutmak gerektigi icin then icerisine data parametresini ekliyoruz
        ve data degiskeni uzerinden kullaniyoruz. Yani creds dosyasi icerisindeki datalar artik data degiskenin 
        icerisinde olmus oluyor.
    })
==>POM yapisi geregi bir sayfaya ait locateler test icerisinde alinmadigi gibi methodlar da test class icersinde olusturulmaz
    bunun yerine ilgili sayfa icin pages klasoru icerisinde bir sayfa olusturulur ve bu islemler orada yapilir.

==>API DEMO NOTLARI
    API testinde ornegin UI da olusturdugumuz bir kullanicinin girilen bilgilerin backend de dogru olarak gorulup 
    gorulmediginin testi yapilabilir.
    -->e2e klasorunun altinda API testing adinda bir klasor olusturduk.
    -->API ile calisirken sisteme baglanabilmek icin token uretmemiz gerekiyor. Bu token uretme islemi her bir giris
        islemi icin gerekli oldugundan token uretme islemini support klasorunun altindaki command.js dosyasinda
        yapiyoruz. Istenirse fixtures altinda bir json dosyasi da kullanilabilir ama command.js daha mantikli. Token 
        post request ile uretilir.
        Cypress.Comamnd.add('generateToken',(username,password)=>{
            const body = {
                username:username,
                password:password
            }

            cy.request({
                method:"POST",
                url:"swagger dokumanindan login gerekli url alinmali",
                body:body,
                headers:{
                    Content-Type:"application/json"
                }
            }).then((response)=>{
                return response.body.token;
            });
        })  
        Ek bilgi olarak JS'in java'dan farkli gibi yukaridan asagi dogru calismadigi bazi durumlar olabiliyor. Ozellikle
        advance methodlar kullanildigi durumlarda boyle seylerle karsilasabiliyoruz. Burada hata almamak icin yukaridaki
        gibi .then() ile calisiyoruz. Boylece request isleminin gerceklesmesini ve daha sonra then'in icersindeki islemlerin
        yapilmasini saglamis oluyoruz. Hatta arka arkaya birden fazla kere then() methodunu kullanabiliriz.
    -->Token alma isleminin it blogu icerisinde yapilmasi:
        it('',()=>{
            -->Eger aldigimiz token'i test icerisinde birden fazla defa kullanmak gerekliyse token'i then() icerisinde 
            degilde su sekilde kullanmak daha mantikli.
            cy.generateToken(username,password).as('authToken');    |Dedigimizde artik token'i authToken degiskenine
            cy.generateToken(username,password).then(               |atamis oluyoruz.
                generateToken() methodunu calsitirdigimizda token'i return ettigi icin then() methodu icersinde dogrudan
                token'i kullanabiliyoruz. 
                (token)=>{
                    console.log(token) diyerek aldigimiz token'i console'a yazdiriyoruz. Burada dikkat edilmesi gereken
                    nokta gelen token'in turunun token'in basinda yazmasi gerektigi. Ornegin bu API'da bearer token
                    oldugu belirtilerek geliyor. Fakat token'in turu belirtilmeseydi bu belirtme islemini bizim manuel
                    yapmamaiz gerekecekti. 
                    cy.request({
                        method:"GET",
                        url:"....",
                        headers: {
                            Authorization: `${token}`
                        }
                    }).then((response)=>{
                        Yapmak istedigimiz assertion lari burada yapiyoruz.
                        axpect(response.status).to.eq(200);Ornek olarak status code'a bakalim.
                        console.log(response.body) diyerek response body'i gorebiliriz boylece body'i gormek icin 
                        ayrica Postman'a bakmaya gerek kalmiyor.
                        expect(response.body[response.body.lenghth-1]).to.have.property("username");
                        response body icerisinde gelen en son elemanda username property sinin olup olmadigini 
                        kontrol ediyoruz.
                        expect(
                            response.body.some((user)=>user.name===userData[0].deanName)
                        ).to.be.true;
                        Kisaca aciklamak gerekirse; some((user)=>user.name===userData[0].deanName) kismi true ya da false
                        bir deger donduruyor. Aranan data varsa true yoksa false dondugunden aranan datanin database olup
                        olmadigini kontrol etmis oluyoruz.
                        -->Birden fazla dogrulamayi chain sistemi kullanarak daha kisa sekilde yapabiliriz. Ornegin;
                        expect(
                            response.body.some(
                                (user)=>{
                                    user.name===userData[0].deanName &&     |Burada yapilan dogrulamalardan herhangi 
                                    user.username===userData[0].username && |birisi fail olacak olursa testimiz fail 
                                    user.ssn===userData[0].ssn              |edecek. Tabi bu durul bu dogrulamar bagimsiz
                                })                                          |olarak yapilsa da degismeyecek.
                        ).to.be.true;
                    })
                })
        }) 
    -->JS some function; bir list'te aranan elemanin var olup olmadigini dogrulamak icin some function kullanilabilir.
        const ages = [3,5,6,19,52]  --> |Kisaca acikalamak gerekirse; checkAdult() fonksiyonu ile ages isimli array 
        ages.some(checkAdult);          |icerisindeki degerlerden en azindan bir tanesinin 18'den buyuk olup olmadigini    
        function checkAdult(age){       |kontrol ediyor ve en azindan bir tanesi 18'den buyuk ise true aksi halde false
            return age>18               |donduruyor.
        }
        Yine some disinda "any" ve "every" isimli fonksiyonlar testlerin yapilisini bir hayli kolaylastiracaktir. Bu 
        sebeple kullanimlarini bilmek ve gerekli yerlerde kullanmak gerek.
    -->Su an projede rest API kullaniyoruz.
    -->API Call ile dean olusturmak(POST Request);
        APi call ile cok hizli bir sekilde dean olusturabiliriz. Fakat calisma hayatinda tester lar genel itibari
        ile get request ile calisirlar ve database in beklenen gibi olup olmadigini kontrol ederler.
        -->Ilk olarak command.js dosyasinda reusable bir method olusturuyoruz.
            Post request 0'dan data olusturumak icin put request var olan datada degisiklik yapmak icin kullanilir.
            Cypress.Commands.add('addDean',(token,deanData)=>{
                cy.request({
                    method: "POST",
                    url: ".....",
                    headers: {
                        Authorization: `${token}`,
                        Content-Type: "application/json",
                    },
                    body: deanData
                });
            });
        -->Test class'inda yapilanlar;
        it('cerate dean', ()=>{
            cy.generateToken(username,password).as('authToken');    |ILk olarak uygulamaya girmak icin gerekli token i 
                                                                    |aliyoruz ve authToken'a atama yapiyoruz.
            cy.get('@authToken').then((authToken)=>{
                const deanData = {
                    ...
                }
                cy.addDean(authToken,deanData);
            })
        });
==>Database Testi;
    -->Esasn cypress'in oncelikli amaci e2e UI testleri yapmak. Bu sebeple cypress ile database testi yapabiliyoruz
    ancak configuration yapmaya ihtiyac duyuyoruz. Oncelikle postgreSQL kullanildigi icin postgreSQL yuklemek gerek.
    Bunun icin "npm install pg" komutunu kullaniyoruz. Database testi kullanilan database tipine(postgreSQL, 
    oracle SQL gibi) gore degisiklik icerebiliyor. Bu sebeple burada postgreSQL icin gerekli ayarlamari gorecegiz.
    Daha sonrasinda cypress.config.js dosyasi uzerinden bazi ayarlamalar yapmamiz gerek. ilgili sayfanin kod yapisi
    asagidaki gibi olmali;
        const { defineConfig } = require("cypress");
        //for postgre sql
        const { Pool } = require("pg");     |Yukledigimiz pg'de Pool isimli bir class var. Java'daki jdbc'ye benziyor.
        
        const dbConfig = {                  |Burada belirtilen bilgiler database giris bilgilerimiz.
        user : "select_user",
        host : "managementonschools.com",
        database : "school_management",
        password : "43w5ijfso",
        port : 5432
        } 
        
        module.exports = defineConfig({
        e2e: {
            setupNodeEvents(on, config) {
            // implement node event listeners here
            
            on('task',{                                     |Burada database'e giris yapip alinan bilgiler return
                async connectDB(query){                     |result ile bize donduruluyor.
                const pool = new Pool(dbConfig);
                const results = await pool.query(query);
                await pool.end(); 
                return results
                }
            })
            
            },
            baseUrl: "https://dummy.restapiexample.com",    |Buradaki baseUrl esasen dogru degil fakat cypress bazen
                                                            |burada bir baseUrl bulunmadigi zaman hata veriyor ve calismiyor
        },                                                  |cypress.config.js dosyasinda her ihtimalde bir baseUrl 
        });                                                 |bulundurmak faydali olacaktir.
    -->Database testine iliskin it blogu;
        it("Dean validation", ()=>{
            cy.task("connectDB",(-Burada query veriyoruz suan icin hard coded bir query verebiliriz- select * from dean-))
            .then((userData)=>{ |Boylece dean table'inda bulunan datalar userData icerisine alinmis oldu.
                expect(
                    userData.rows.some(
                        (eachUser)=>    |Burada {} kullanmadigimiza dikkat etmek gerek.
                            eachUser.username ===userData[0].username &&
                            eachUser.ssn ===userData[0].ssn &&
                            eachUser.phone_number ===userData[0].phone
                    )
                ).to.be.true;
            })
        })
==>Cypress vs Cypress Cucumber
    -->Selenium ile calisirken cucumber'a ihtiyac duyuluyor cunku ozellikle raporlama konusunda cypress zayif 
    kalabiliyor. Ancak cypress ile calisirken cok fazla ihtiyac duyulmayabilir. Yine de cypress cucumber framework ile
    kullanilmak istenirse kullanilabilir ve framework'e renk katilmis olur. Cypress ile birlikte cucumber kullanmayi
    bilmek arti bir deger olarak kabul ediliyor. Bazen yorucu hatalar alinabildigi de goz onunde bulundurulmalidir.
    -->Similarities:
        - Data dosyalari;creds.json, register-data.json ...
        - Page classes; yine support'un altinda .js uzantili page class'lar kullanabiliyoruz.
        - Reusable methodlar; commands.js dosyasi icerisinde olusturuyoruz.
        - It blogunun icindeki test kodlari; Buradaki farklilik Cucumber'daki feature filolarina aktarilirkenki 
        siralama olabilir. Bir it blogunun icindeki kodlar birden fazla step defenitions'a aktarilabilir.
        Daha net olarak ifade etmek gerekirse POM yapisi ve test kodlarinda herhangi bir degisiklik olmuyor.
    -->Differencies;
        - En onemli farkliliklardan bir tanesi .feature uzantili feature dosyalari. Bir diger onemli fark .js uzantili 
        step definition dosyalari. Step defÄ±nÄ±tÄ±on Ä±cersÄ±ndekÄ± kod siralamasi onemli degildir. Kodlar feature dosyasindaki
        given, when, then seklindeki siralmaya gore calisir.
        - Installation kismi farkli.
        - Feature file; Cucumber'da ek feature dosyasi bulunur ve test adimlari buraya yazilir. Burada tanimlanan her bir
        adima karsilik gelen bir step definition olmasi sarttir.
        - Step defÄ±nÄ±tÄ±on; TeknÄ±k test kodlarinin yazildigi kisimdir. Bir framework'te ayni isimle birden fazla step 
        definition olamaz. 
        - Config file; Cucumber'daki cypress.config.js dosyasindaki ayarlar, feature dosyalarinin calistirilabilmesi 
        icin duzenlenmelidir. Ayrica tsconfig.json gerekebilir. Ayarlar arasinda, Custom Parameters'daki setting.json'a
        step definition yolunun eklenmesi gerekebilir.





