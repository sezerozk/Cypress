==> Npm(node package manager)
==> Kurulum icin ilk olarak "npm init" komutu ile baslayabiliyoruz fakat sart degil.Bu komut ile basladigimizda 
sonrasidna girdigimiz bilgiler proje icerisine olusturulan package.json dosyasi olarak ekleniyor.Ayrica sonrasinda 
ekledigimiz framework ler ve plugin ler de yien buraya ekleniyor. 
==> cypress kurulumu icin "npm install cypress --save-dev " komutunu kullandik.
==> fixtures; test verilerinin saklandigi klasor
==> e2e; otomasyon kodlarinin saklandigi klasor
==> support;reusable kodlar ve methodlari eklemek icin kullanilir
==> cypress.config.js;Proje ayarlarinin yapilandirildigi dosya.Biraz daha aciklamak gerekirse ornegin
defaultCommandTimeout: 4000 ayari cypress'in default olarak bekledigi sureyi gosteriyor bunu degistirmek istersem sondaki 
4000 degerini degistirmem ve degismis halini cypress.config.js dosyasi icerisine eklemem yeterli olacaktir.Bir diger 
ornek olarak istersek yaptigimiz testlerin videolarini cekebiliyoruz.Bu ozellik default olarak desactive fakat
"video:false" olarak belirtilen ayari "video: true" olarak degistirip cypress.config.js dosyasina eklersem cypress yaptigi 
testlerin videosunu cekmeye baslayacaktir.
==> package.json; Proje bilgilerinin ve dependecy'lerin saklandigi dosya
==> package - lock.json; Yuklenen modullerin saklandigi dosya
==> npx cypress run komutu ile tum testlarin headless olarak kosturulmasi saglaniyor.
==> npx cypress run--spec "dosya ya da klasor yolu" bu durumda elektron browser'inda testler kosulmus 
oluyor.
==> npx cypress run--borwser chrome--spec "dosya ya da klasor yolu" Bu ihtimalde testlerimizi chorme browser uzerinde 
kosmus oluyoruz.
==>npx cypress run--headed--browser chrome--spec "dosya ya da klasor yolu" seklinde yazdigimizda ise browser acilacak ve 
testler acilan browser'da kosulacak.
==> Akilli kod yazma destegi icin cypress klasori icerisinde tsconfig.json isimli bir klasor olusturduk.
==> Cypress Snippets isimli bir plugin ekledik ve bu plagin sayesinde bir cok kisaltmadan faydalanabiliyoruz.Bazi orneklerini 
asagiya kopyaladim.
Snippet	Code
cyvt	cy.visit('');
cygt	cy.get('');
cyfd	cy.get('').find('');
cyft	cy.get('').first('');
cyte	cy.get('').type('');
cycs	cy.contains('');
cyck	cy.get('').click();
cywt	cy.wait('');
cylg	cy.log('');
cype	cy.pause();
cydg	cy.debug();
cyst	cy.screenshot('');
cyvp	cy.viewport();

Mocha Snippets
Snippet	Code
dsb	describe('', () => {

    });
ctx	context('', () => {

    });
spy	specify('', () => {

    });
it	it('', () => {

    });
bf	before('', () => {

    });
bfe	beforeEach('', () => {

    });
af	after('', () => {

    });
afe	afterEach('', () => {

    });
==> es6 mocha snippets, add only, hide comments isimli  baska pluginler yukledik. 
==> describe ve it bloklari mocha framework'ten geliyor. Bunlarla beraber context(), before(), beforeeach(), afterEach(), 
after(), .only(), .skip() te mocha frame workten geliyor.
==> Chai framework; assert, should, expect
==> Cypress'in negatif olabilecek yonleri;
1) Safari desteklenmiyor
2) Mobil otomasyon desteklenmez
3) Tek URl ve tek sekme kullanimi
4) Iframe ile pek iyi anlasamaz(bir eklenti ekyerek iframe ile kullanabiliyruz)
==> Versiyon guncelleme icin
npm install -D cypress@versiyon komutunda versiyon kismina kurulmak istenen versiyon numarasi yazilir.
==> Locator yontemleri
- Cypress yalnizca CSS Selektor yontemini desteklenmiyor
- XPATH kullabilmek icin cypress - xpath eklentisi eklenmelidir.Fakar cypress le calisirken CSS kullanmak
daha mantikli
-Selektor playground ile CSS elementlerini kolay bir sekilde alabiliyoruz. 
==>CSS Selector kullanimi
tagname                                 -->input
ID                                      -->#search
Class name                              -->.search
Attribute value                         -->[id="search"]
Class value                             -->[class="search"] class value kullanmamizin sebebi bazi durumlarda birden fazla class
ayni anda kullanilabilmesidir. "." ile calistigimizda sadece bir tane class degeri kullanabilirken class attribute ile 
calistigimizda istenen sayida class degerini kullanrak kod yazabiliriz.
Tag name and attribute value            -->input[id="search"] tag name and attribute value nin bir arada kullanilmasini aranan
degerin cok daha hizli bulunmasini saglamasidir.
Tag name and multiple attribute value   -->input[id="search"][name="keyword"]
==>Saydafa Locator leri ararken inspecter dedikten sonra ctrl+f diyoruz ve acilan kutucukta aramak 
istedigimiz seyi ariyoruz. Ornegin "a" tagini aradigimizi dusunelim. Acilan kutucukta sayfada bulunan 
tum a lari aramis oluyoruz. Fakat en basa // koyup a yi aradigimizda sayfada bulunan a taglerini aramis
oluyoruz.    
==> cy.url() methodu ile acik olan sayfanin url sini text olarak alabiliyoruz.
==>cy.title() ile sayfanin basligini alabiliyoruz. 
==>cy.contains('') sayfada bulunan bir text ile lacate almak icin bu methodu kullaniyoruz
==>cy.get() ile locate alirken yazilan kodlar sayfada birden fazla elemente karsilik geliyorsa
bu method tum elementleri liste halinde dondurdugunden o liste uzerinde islem yapmak da mumkundur.
==>XPATH Kullanimi
tag name                            -->//input
Attribute value                     -->//*[@id="search"] Burada tag name belirtilmedigi icin 
mevcut tum taglerde arama yapabilmek icin "*" kullaniyoruz.
Tag name and attribute kullanimi    -->//input[@id="search"]
Full text value                     -->//a[text()="giris yap"] Text ile locate almak icin kullaniyoruz
Contains text value                 -->//a[.="giris"] Burada nokta contains anlamina geliyor yani bir 
ustteki yontem yerine bu yontem de kullanilabilir
Multiple attribute value            -->//[@id="search" and @name="keyword"]
==>XPATH Eklentisinin Cypress'e eklenmesi:
- Ilk olarak bilinmesi gereken yuklenen bu paket gelistiricisi tarafindan guncellemesi olmayan bir 
pakettir. Yuklemek icin terminalde
"npm install -D xpath_cypress" kodunu yazmak gerek. 
Paket indikten sonra cypress'e yukledigimiz paketleri e2e.js dosyasi araciligi ile cypress'e
tanitmamliyiz aksi halde kullanamiyoruz. Bunun icin support klasorunde bulunan e2e.js dosyasina
"require('xpath_cypress')" kodunu ekliyoruz. Ve testlerimizde cy.xpath() methodu araciligiyla xpath
kulanabiliyoruz.
==>Metot zinciri kullanimi:
-->Bir elementin altindaki elementi bulma 
cy.get('.mylist').find('li') Burada mylist isimli liste icinde bulunan li tagli elementi buluyoruz.
cy.get('.sehirler').contains('Adana') Burada yukaridakine benzer bir islemi find ile degil contains ile yapiyoruz.
-->Bir elementin icindeki elementlerle calismak icin within() methodunu kullaniyoruz. 
cy.get('.form-container').within(()=>{
    cy.get('input[name="username"]').type('Sezer');
    cy.get('input[name="password"]').type('Sezer');
});
Bu kullanim daha cok form elemanlari ile calisirken karsilastigimiz bir durum. Avantaji ise burada within() ile bir cerceve olusturup
onun icerisinde calisiyoruz. Ornegin burada form-container class'inin icindeki elemanlarla calisacagimizi en bastan belirlemis 
oluyoruz.
==>EYLEM KOMUTLARI
    Otomasyon yaparken kullanicinin siteyle etkilesime gecmesini saglayan islemleri(yazi yazmak, tiklamak, sayfayi kaydirmak gibi)
    yapmamiza olanak saglayan komutlara eylem koutlari diyoruz.
    .check() -- .clear()  -- .click() -- .dbclick() -- .rightclick() -- .scrollIntoView() -- .scrollTo() -- .select()
    .selectFile() -- .trigger() -- .type() -- .unCheck()  
==>Cypress'te yeni sekme ile calisma
    Cypress iki farkli sekmede ayni anda calisamaz
    Bu sorunu cozmek icin farkli yontemler kullanilir:
    1-Sayfanin yeni sekmede acilmasini engellemek
    cy.get('#link').invoke('removeAttr','target').click()
    2- Acilmak istenen sayfanin adresini ziyaret etmek NOT: ilk ziyaret edilen sitenin alt alanlari ziyaret edilebilir
    fakat yeni bir adres ziyaret edilmek istenirse hata alinir.
==>ALERT:
    Kullanicidan cevap almak icin kullanilan bir pop-up pencere turudur.
    Cypress alert mesajlari otomatik olarak handle eder.
==>Navigasyon Methodlari
    Borwser da geri, ileri ya da sayfa yenileme gibi islemleri yapmak icin kullnadigimiz methodlardir.
    go(directions, opttions) 
    cy.go(back) ya da cy.go(-1)
    cy.go(forward) ya da cy.go(1)
    cy.reload()-->sayfayi yeniler
==>Screenshot
    Cypress otomatik olarak fail olan testlerde screenshot aliyor fakat biz iradi olarak screenshot 
    almak istersek cy.screenshot() methodunu kullanabiliriz.
    Bir de cypress o sirada acik olan sayfanin tamaminin ekran goruntusunu aliyor. Bunun yerine 
    bir elementin ekran goruntusunu almak istersek yine bu methodu kullanabiliriz.
==>Iframe;
    Inline Frame kelimelerinin kisaltmasidir. Sayfa icinde baska sayfalari gomebilmek icin kullaniliyor. 
    cypress-iframe eklentisi yuklenerek kullanilir. (npm install -D cypress-iframe) komutu ile yuklenir.
    e2e.js dosyasina(support klasorunde bulunuyor) require('cypress-iframe') kodu eklenir.
    cy.frameLoaded() ve cy.iframe() methodlari ile kullanilir.
    cy.frameLoaded() methodu ile iframe alanini tanimlayip sonrasinda cy.iframe() methodu ile locate
    alma islemini yapiyoruz.
==>Shadow root;
    Almak istedigimiz locate shadow root icerisinde ise tipki iframe de oldugu gibi dogrudan locate ' erisemiyoruz.
    Oncelikle shadow root icerisine girip daha sonra locate almamiz gerekmekte. Bunun icin shoadow root'un icerisinde 
    oldugu elementin locatini alip hemen sonrasinda shadow() methodu ile buranin shadow alani oldugunu belirterek
    islemlerimize devam ediyoruz.
==>Faker;
    Sahte datalar ureterek otomasyonda kullanmak icin faydalaniyoruz. Bunun icin faker eklentisinin kurulmasi gerekiyor.
    npm install --save-dev @faker-js/faker komutu ile eklenti kurulur
    e2e.js dosyasina require('@faker-js/faker') kodu eklenir.
==>cy.writeFile('dosya yolu','saklanacak degiskenin ismi')
    cy.writeFile('datas/email.txt',email) gibi seklinde bir yazim ile projenin ana klasorunde
    datas isimli bir klasor ve onun icinde email isimli bir dosya olusturduk ve email 
    degiskenini o dosya icerisine yazdirdik. Bu sekilde bir testte olusturdugumuz datayi
    baska classta bulunan bir testte bu dosya uzerindne kullanabiliriz. Dikkat edilmesi gereken
    ayni dosyaya tekrar ekleme yapildiginda eskisini silerek yenisini yaziyor.
    writeFile() ile json data turunde dosyalar da olusturabiliyour. Fakat bu dosyalari readFile() ile okuyamiyoruz.
    Esasen bu da bir problem degil cunku json dosyalarini fixtures klasorune koyup cy.fixture() methodu ile
    icerisindeki verileri kullanabiliriz.
==>dosyaya yazdigimiz datalari kullanabilmek icin;
    cy.readFile('datas\email.txt').then((email)=>{

            cy.get('#email').type(email);
        }) seklinde bir kod blogu olusturmak gerek. Bu sekilde bir testde olsuturdugumuz datayi baska bir testde 
    ayni class'ta olmasalar dahi mumkun olabiliyor. Bu kullanim bir cok yerde ise yarayabilir.
==>Parent child iliskisi uzerinden element arama > isareti ile arama yapildigi zaman sacede belirtilen parentin
    cocuklari arasinda arama yapilmis oluyor. Fakat bunun yerine bosluk( ) birakarak arandiginda ise belirtilen
    parent'in tum altsoylari arasinda arama yapilmis oluyor. 
==>wrap() methodu; wrap kelime anlami olarak sarmalamak demek.
    cy.wrap() methodu, cypress asenkron calisma ozelligine uygun olarak, non-Cypress degerlerini, jQuery objelerini
    veya asenkron islemlerin sonuclarini Cypress test zincirine dahil etmek icin guclu bir aractir.
    1- Javascript degiskenlerini cypress komut zincirine dahil etme; testler sirasinda js degiskenleri ve hesaplamalari
    kullanmak gerekebilir ve bu degiskenleri cypress komut zincirine dahil etmek icin wrap() methodunu kullaniriz.
    Ornegin; 
    const myObject = { key: 'value' };
    cy.wrap(myObject).should('have.property', 'key', 'value'); Burada myObject js degiskenini cypress in should 
    methodu ile kullanabilmek icin wrap() methodu kullanildi.
    2-JQuery objeleri uzerinde cypress komutlarini kullanma; testlerde bazen dogrudan DOM elementlerini islemek
    icin jQuery kullanilabilir..then() ya da baska methodlarla elde edilen jQuery objeleri uzerinde cypress komutlarini
    kullanabilmek bu objeleri wrap() methodu ile sarmalamaliyiz. Ornegin;
    cy.get('.my-list').then($list => {
        const firstItem = $list.first(); // jQuery objesi
        cy.wrap(firstItem).click(); // Cypress komutunu kullanabilmek için wrap kullanılır
    });
==>expect() ile dogrulama; should methodunu dogrudan kullanamiyoruz ya method zincirinde ya da cy.should() seklinde
    kullanioyruz. Fakat expect() kullanirken boyle bir zorunluluk yok.
==>cy.fixture() methodu it blogu yani test disinda kullanilamiyor.
==>Hooks; Mocha ile birlikte cypress'e gelen methodlardir. Tekrar olmasi acisindan describe ve it bloklari da
    mocha ile gelen ozelliklerdir. Chai ise daha cok assertion yaparken kullandigimiz ozellikleri barindiriyorlar.
    Bu iki framework'te cypress icinde gomulu olarak gelen frameworklerdir.
    before()        -->Ilk test baslamadan once bir kez calisir
    after()         -->Tum testler tamamnlandiktan sonra bir kez calisir
    beforeEach()    -->Her testten once calisir
    afterEach()     -->Her testten sonra calisir
    before() hook datalarin olusturulmesi icin avantajli olabilir ya da before ile veri tabani 
    baglantisi yapip after hook ile bu baglantiyi kesebiliriz.

==>cy.fixture() methodu default olarak fixtures klasoru icerisindeki dosyalara ulasir. Bu 
    sebeple fixtures klasoru altindaki bir dosya icin sadece dosyanin adinin yazilmasi icindeki datalara ulasmak
    icin yeterli olur ancak baska bir klasor icerisinden veri cekmek isteniyorsa dosya yolu tam verilmelidir.
==>Custom Commands; cok sik kullandigimiz bazi islemler icin istersek kendimiz de method olusturabiliriz. reusable  
    method olarak dusunulebilir. Custom command'lar support klasorunun altindaki commands.js dosyasi icerisinde 
    olusturuluyor. Custom command lar parametreli ya da parametresiz sekilde olusturulabilir.
    Method olusturma syntax'i;
    Cypress.Commands.add('Method ismi', (parametreler)=>{

    })

==>Special character sequence: { enter } is not recognized. Available sequences are: selectAll, moveToStart, 
    moveToEnd, del, backspace, esc, enter, rightArrow, leftArrow, upArrow, downArrow, home, end, insert, pageUp, 
    pageDown, {, alt, option, ctrl, control, meta, command, cmd, shift
==>BaseUrl; baseUrl cypress.config.js dosyasinda e2e nun icine eklenir. BaseUrl bir kere tanimlandiktan sonra visit
    methodu ile calisirken adres yazmak yerine baseUrl in kullanildigini belirtmek icin cy.visit('/'); komutu yeterli 
    olacaktir.
    - Sitedeki diger path leri env ismiyle olusturulan dosya icerisine ekleyip kullanabiliriz. env icerisinde olusturdugumuz
        degiskenleri Cypress.env('') ile cagirip kullaniyoruz.
==>Cypress Session; Test yaparken birden fazla kere yaptigimiz islemleri cypress'in hafizasina almasini ve birinciden 
    sonraki seferlerde islemin daha az eforla ve daha hizli yapilmasini sagliyor.  
 