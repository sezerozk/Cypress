==>Kurulum:
    jenkins sadece java 11 ya da java 17 ile calistigi icin pc'de bu ikisinden birisinin kurulu olmasi gerek. Biraz once 
    actigimiz les variables système kismini acip les variables système'i tikladigimda hocada JAVA_HOME adinda bir 
    degisken oldugunu fakat bende olmadigini fark ettim. Aslinda bende de jdk-17 yuklu idi. Anladigim kadari ile buradaki 
    JAVA_HOME degiskenin adresi olarak hangi jdk surumu verilirse o versiyonu kulanmis oluyoruz. Yani pc de birden fazla 
    jdk surumu ayni anda yuklu olsa, hangi jdk surumunu kullanmak istiyorsak ilgili dosyanin path'ini JAVA_HOME degikenin 
    degeri olarak atayarak istedigimiz jdk surumu ile calisabiliriz. Bu sebeple JAVA_HOME degiskenini manuel olarak 
    olusturdum ve su an icin jdk-17'nin dosya yolunu verdim. Yine java surumunu kontrol etmek icin cmd'ye java -version 
    komutunu da yazabiliriz.
    https://www.jenkins.io/download/ sitesi uzeinden Generic Java package dosyasini indiriyoruz.
    Inen dosyayi techPro klas icerisinde Jenkins ismi ile olusturdugum bir klasorun icerine ekledik. Jenkins'i acma islemeini inen bu dosya 
    uzerinden gerceklestirecegiz. Daha sonra jenkin'i kaydettim bu dosyanin adres cubugune cmd yazarak bu dosyasi komut ekraninda acmis oldum.
    java -jar jenkins.war komutu ile kurulumu baslattim. Bu komuttan sonra soyle bir sifre ortaya cikti; 
    5dc1fea2626c41b4a3b62685564297cf
    Daha sonra chrome browser'da localhost:8080 adresine gittik. Acilan ekrana sifreyi girerek devam diyoruz. Acilan ekranda install suggested 
    plugins secenegini seciyoruz.
    Jenkinsle alakali indirdigimiz plugins vs. c diskinde utilisateur/33620/.jenkins isimli klasorde tutuluyor.
    Plugin ler yuklendikten sonra ilk admin kullaniciyi olusturdugumuz ekran aciliyor.
    kullanici adi: sezer
    sifre: sezer123
    Boylece kurulum tamamlanmis oluyor ve kontrol merkezi olarak isimlendirilen anasayfaya geliyoruz. Burada yeni oge olusturmek yeni bir proje 
    olusturmak demek oluyor. Burada proje olustururken serbest stil proje seciyoruz.
    - NodeJs eklentisi yukledik ve daha sonra bu eklentiyi araclar uzerinden jenkins'e tanittik.
    - Daha sonra yeni oge diyerek Cypress249Cucumber-localHost adinda yeni bir proje olusturduk.
    - Olusturdugumuz projenin konfugrasyon ayarlari uzerinden gelismis secenegine tiklayip asagida ozel alan kullan 
    dedikten sonra jenkinsle calistirmak istedigimiz projenin dosya yolunu buraya ekledik.
    - Ayarlarin alt kismindan "yapilandirma adimlari" nin icerisinde yapilandirma adimi ekle dedik ve windows icin 
    "windows batch komutu calistir" secenegini sectik. Sectikten sonra acilan yorum kutusuna jenkinsle beraber 
    kullanacagimiz komutlari yaziyoruz. 
        * Ilk olarak npm install komutunu ekledik. Bunu calistirmak istedigimiz projede node modules klasorunun 
        bulunmadigi durumlarda jenkins tarafindan bu klasorun yujlenebilmesi icin ekliyoruz. 
        * Daha sonra tekrar yapilandirma adimi ekle diyerek baska bir komut daha ekliyoruz. Projemizde olusturdugumuz
        smokeTests script'inin calisabilmesi icin yazdigimiz <<npm run smokeTests>> komutunu buraya da ekliyoruz ve 
        kaydet butonuna tikliyoruz.
    - Olusturdugumuz projeye gidip simdi yapiladir dedigimizde ekledigimiz komutlarla testlerimiz calistiriliyor.
    Somke test tag'i ile olusturdugumuz testlerin calismasi icin gerekli kodu komut olarak ekledigim icin yapilandir 
    dedigimde smoke testler kosulmus oluyor.
    - Kosum sonrasinda olusturulan raporun daha renkli ve okunabilir olmasi icin <<ansi color>> eklentisini kurduk. 
    Daha sonra kurdugumuz bu eklentiyi hangi projede calistirmak istiyorsak o projede konfigurasyonu duzenle deyip
    yapilandirma ortami secenegi icerisinde color ansi console output secenegini secerek kaydet butonuna tikliyoruz.
    Bu eklentinin daha verimli calisabikmesi icin cmd ekraninda server'i kapattiktan sonra 
    "java -Dfile.encoding=UTF8 -jar jenkins.war" komutu ile server'i tekrar calistirdik. Bu ayarlamalardan sonra jenkins'teki
    console output vscade console'a benzer bir goruntu ile calismaya basladi ve bu sayede hangi testlerin kosuldugu 
    testlerin kaldigi ya da gectigi gibi hususlari anlamak daha kolay hale geldi.
    - Bir sonraki asamada projemizi daha dinamik hale getirebilmek icin duzenlemeler yaptik. Su anki halde kosmak istedigimiz 
    testler icin komut eklememiz gerekiyor. Bunun yerine sadece olusturdugumuz scriptlerin isimlendirmeleri ile calisabilmek
    icin konfigurasyon bolumunden <<bu projeyi parametrik hale getir>> dedikten sonra parametre ekle diyoruz ve acilan 
    pencereden <<choice parameter>> secenegini seciyoruz. Daha sonra olusturacagimiz parametrelere genel olarak 
    vereceigimiz ismi seciyoruz. Ben <<script>> dedim. Alt kisimda ise projemizdeki scriptlerin isimlerini yaziyoruz.
    Boylece script parametresini kullanarak projemizde olan ve jenkins'e script parametresinin altinda ekledigimiz butun
    scriptleri kullanabilir hale geliyoruz.
        Parametrenin kullanimi; bunun icin daha yazdigimiz npm run smokeTest komotunu npm run %script% seklinde degitirip
        kaydediyoruz. Bu degisikliklerden sonra projede daha <<simdi yapilandir>> olarak gorunen kisim parametrelerle
        yapilandir olarak gorunmeye basladi ve tikladigimizda hangi testleri calistirmak istiyorsak buradan secebilir hale geldik.
    -->Tag'lerle projeme kosumu:
        Cypress249Cucumber-localHost--Tags ismi ile yeni bir oge olusturduk ve diger projedeki konfigurasyonlari kullanabilmek
        icin serbest stil proje demek yerine asagida kopyalanacak oge kismindan ilk projemizin adini sectik. Boylece her iki 
        projede ayni konfigurasyonlara sahip olmus oldu. Daha sonra choice parameter kismindaki scrip'i tag ile degistirip 
        choices kismina @ isareti kullanmadan tag isimlerini ekledik. Asagidaki command kismini npx cypress run -e tags="@%tag%"
        seklinde degistirdik. Sonrasinda tipki scriptlerle kosarken yaptigimiz gibi parametrelerle yapilandir kismindan
        calistirmak istedigimiz tag'i secerken testlerimizi calistirdik.
    -->Browser secimini parametrek hale getirerek kosum yapmak;
        Cypress249Cucumber-localHost--Tags isimli projede parametre ekle/choice parameter secenekleri uzerinden parametre
        ekledik. Daha sonra asagidaki komut satirini npx cypress run -e tags="@%tag%" --browser %browser% --headed seklinde 
        degistirdik. Boylece projemizde iki farkli parametre secimi mumkun hale gelmis oldu. Ilk parametre ile hangi tag'e 
        sahip testlerin kosulacagini ikinci parametre ile ise hangi browserda kosulacagini seciyoruz. Koda --headed kismini
        ekledimiz icin artik sectigimiz browser acilarak kosum yapiliyor. Biz de testler kosulurken izleyebiliyoruz.
    -->Jenkins icerisinde HTML raporu olusturmak:
        Konsol ciktisi duzenlenmis hali ile dahi cok da okunakli olmadigindan daha kolay anlasilir raporlamalara ihtiyac 
        duyulabilir. Jenkins i yonet kismindan cucumber raports eklentisini yukluyoruz. Daha sonra hangi projede bu raporu
        kullanmak istiyorsak o projenin konfigurasyon ayarlarinda en altta bulunan yapilandirma sonrasi aksiyonlar kismindan
        cucumber reports secenegini secip kaydet butonuna tikliyoruz. Bu plugin'i kullanmak icin daha once cucumber projemiz
        icerisinde duzenlemeler yaptigimizi unutmamamiz gerek. Yaptigimiz duzenlemeler ile ilgili aldigim notlar su  sekilde;
            -->Oncelikle json data turunde bir rapor olusturabilmek icin json formatter'e ihtiyacimiz var bunun icin su siteye
            gidiyoruz; https://github.com/cucumber/json-formatter 
            Bu sayfada degisik isletim sistemleri icin gerekli olan kurulum adimlari aciklaniyor. Burada windows icin gerekli 
            olan dosyayi ustte belirtilen github sayfasindan indirdik. Daha sonra bilgisayardaki kullanicilar klasoru icerisine
            cucumber-json-formatter adinda bir klasor olusturarak indirdigimiz dosyayi buraya yapistirdik. Daha sonra indirdigimiz 
            dosyanin ismini cucumber-json-formattet.exe olarak degistirdik. Bu asamdan sonra once adini degistirdigimiz bu 
            dosyanin path'ini aldik. Bilgisayarin arama kismini les variables d'environnement(ortam degiskenleri) yazdik. Actigimiz
            pencerede variables environnement(sistem degiskenleri) butonuna tikladik. Burada variables utilisateur ve variables
            système pencerelerinden variables système penceeresinin icindeki path'i bulduk ve daha sonra alttaki modifier 
            butonuna tikladik ve acilan penceredeki bos bir satira cift tiklayarak daha once kopyaladigimiz dosya yolunu buraya
            yapistirdik. Burada yaptigimiz ayarlamalar jenkins kullaniminda da ihtiyacimiz olan ayarlamalar. 
            Bu asamalari gerceklestirdikten sonra package.json dosyasinda html raporunda yaptigimiza benzer sekilde su ayarlamalari
            yaptik:
            "json": {
            "enabled": true,
            "fomatter":"cucumber-json-formatter",
            "output": "cypress/reports/cucumber-json/cucumber-report.json"
            } 
            Boylece reports klasoru altinda cucumber-json isminde bir klasor daha olustu ve test kosumundan sonra olusturulan json dosyasi otomatik
            olarak bu klasore eklenmis oldu. Biz bu dosyayi jenkinsle birlikte kullanmak istiyoruz. Fakat dogrudan bu dosyayi rapora donusturmek 
            isteseydik multiple cucumber HTML reporter'i kurmamiz gerekecekti.
        -->Projemizde reposts/cucumber-json klasoru icerisinde bulunan raporun ismi <<cucumber-report.json>> seklinde oldugundan konfigurasyon
            kisminda cucumber raports kisminda file include pattern kisminda <<**/*.json>> seklindeki bolumu <<**/*cucumber-report.json>> seklinde
            degistirdik. Boylece jenkins te yaptigimiz bu duzenlemeler sayesinde projemizde bulunan ve raporda yer alan bilgileri barindiran
            json dosyasi bulunacak ve o dosyadaki bilgilerden bir rapor olusturulacak. 
    -->Projeyi github uzerinden calistirmak:
        Yeni oge olustur secenegi ile Cypress249Cucumber-Github--Tags adinda yeni bir proje olusturduk. Daha once tag'lerle
        calismak icin olusturdugumuz projenin konfigurasyon ozelliklerini bu projeye kopyaladik. Daha sonra konfigurasyon
        kisminda gelismis secenegi altinda bulunan ozel calisma alanini kullan'daki isareti kaldiriyoruz. Ve kaynak kodu
        yonetimi kisminda git secenegini secip hemen altindaki repostory url kisminda github repo muzun adresini ekliyoruz.
        Credintials kismina github kullanici adi ve sifremizi eklememiz gerek. Bunun icin hemen alttaki add secenegini 
        tiklayip username ve password girisi yapiyoruz ve son olarak yaptigimiz degisiklikleri kaydediyoruz. 
        Burada belki soyle bir farkliliktan bahsedilebilir. Github'a projeyi yuklerken .gitignore dosyasi ile node_modules u
        yuklemedigimiz icin jenkins uzeinden ilk defa calistirdigimizda daha once ekledigimiz npm install komutu ile node
        modules dosyasi indirilecegi icin biraz daha yavas calisacaktir. Fakat daha sonraki kosumlarda bir kere indirilip
        kaydedilecegi icin yavas calisma durumu ortadan kalkacaktir.
    -->Jenkins araciligi ile projeyi otomatik olarak calistirmak:
        Otomatik olarak calistirmak istedgimiz projenin konfigurasyon kismina gidip periyodik olarak yapilandir kisminin altinda bulunan
        planla kismi uzerinden yapiyoruz. Calisma mantigi su sekilde;
            Planla kisminin yan tarafindaki soru isaretine tiklandiginda nasil kullanildigi aciklaniyor.
            * * * * * (her dakika kosar)
            15 * * * * (her 15 dakikada bir kosar)
            15 13 * * * (her gun saat 13.15'te kosar)
            15 13 10 * * (her ayin 10. gunu saat 13.15'te kosar)
            15 13 10 2 * (subat ayinin 10. gunu saat 13.15'te kosar)
            15 13 * * 1 (her pazartesi saat 13.15'te kosar)
            MINUTE	Minutes within the hour (0–59)
            HOUR	The hour of the day (0–23)
            DOM	The day of the month (1–31)
            MONTH	The month (1–12)
            DOW	The day of the week (0–7) where 0 and 7 are Sunday.
        Unutmamak gerekir ki otomatik olarak baslanabilmesi icin server'in acik olmasi gerekmektedir.

